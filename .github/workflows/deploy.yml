# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# GitHub Actions CI/CD Pipeline for AI-Arbeidsdeskundige
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# 
# Automated CI/CD pipeline with:
# - Code quality checks and testing
# - Security scanning and vulnerability assessment
# - Multi-stage deployment (staging -> production)
# - Monitoring and alerting integration
# - Rollback capabilities
#
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

name: Deploy AI-Arbeidsdeskundige

on:
  push:
    branches:
      - main
      - master
      - develop
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ CODE QUALITY AND TESTING                                               │
  # └────────────────────────────────────────────────────────────────────────┘
  
  test:
    name: Run Tests and Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install Python dependencies
        run: |
          cd app/backend
          pip install -r requirements.txt
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: app/frontend/package-lock.json
      
      - name: Install Node.js dependencies
        run: |
          cd app/frontend
          npm ci
      
      - name: Run Python linting
        run: |
          cd app/backend
          pip install flake8 black isort
          flake8 app/ --max-line-length=88 --extend-ignore=E203
          black --check app/
          isort --check-only app/
      
      - name: Run Python tests
        env:
          POSTGRES_SERVER: localhost
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
          REDIS_URL: redis://localhost:6379/0
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        run: |
          cd app/backend
          pytest --cov=app --cov-report=xml --cov-report=html
      
      - name: Run TypeScript checks
        run: |
          cd app/frontend
          npm run type-check
      
      - name: Run frontend tests
        run: |
          cd app/frontend
          npm run test:unit
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./app/backend/coverage.xml
          flags: backend
          name: backend-coverage
      
      - name: Store test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results
          path: |
            app/backend/htmlcov/
            app/backend/coverage.xml

  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ SECURITY SCANNING                                                      │
  # └────────────────────────────────────────────────────────────────────────┘
  
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python, javascript
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
      
      - name: Run secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ BUILD DOCKER IMAGES                                                    │
  # └────────────────────────────────────────────────────────────────────────┘
  
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security]
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      worker-image: ${{ steps.meta-worker.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # Backend API Image
      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./app/backend
          file: ./app/backend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Worker Image
      - name: Extract metadata for worker
        id: meta-worker
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push worker image
        uses: docker/build-push-action@v5
        with:
          context: ./app/backend
          file: ./app/backend/Dockerfile.worker.prod
          push: true
          tags: ${{ steps.meta-worker.outputs.tags }}
          labels: ${{ steps.meta-worker.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Frontend Image
      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./app/frontend
          file: ./app/frontend/Dockerfile.prod
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VITE_API_BASE_URL=${{ vars.API_BASE_URL }}

  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ STAGING DEPLOYMENT                                                     │
  # └────────────────────────────────────────────────────────────────────────┘
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    
    environment:
      name: staging
      url: ${{ vars.STAGING_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup deployment environment
        run: |
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "DEPLOYMENT_HOST=${{ secrets.STAGING_HOST }}" >> $GITHUB_ENV
      
      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_SSH_PORT }}
          script: |
            cd /opt/ai-arbeidsdeskundige
            git pull origin develop
            ./deployment/scripts/deploy.sh staging
      
      - name: Run staging health checks
        run: |
          sleep 60  # Wait for services to start
          curl -f ${{ vars.STAGING_URL }}/api/health
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ PRODUCTION DEPLOYMENT                                                  │
  # └────────────────────────────────────────────────────────────────────────┘
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup deployment environment
        run: |
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "DEPLOYMENT_HOST=${{ secrets.PRODUCTION_HOST }}" >> $GITHUB_ENV
      
      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_SSH_PORT }}
          script: |
            cd /opt/ai-arbeidsdeskundige
            git pull origin main
            ./deployment/scripts/deploy.sh production ${{ github.event.inputs.force_deploy && '--force' || '' }}
      
      - name: Run production health checks
        run: |
          sleep 120  # Wait longer for production services
          curl -f ${{ vars.PRODUCTION_URL }}/api/health
          
          # Additional production-specific health checks
          curl -f ${{ vars.PRODUCTION_URL }}/api/v1/monitoring/metrics/snapshot
      
      - name: Run smoke tests
        run: |
          # Add smoke tests here
          echo "Running production smoke tests..."
          curl -f ${{ vars.PRODUCTION_URL }}
      
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: |
            Production deployment ${{ job.status }}!
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: ${{ vars.PRODUCTION_URL }}

  # ┌────────────────────────────────────────────────────────────────────────┐
  # │ POST-DEPLOYMENT MONITORING                                             │
  # └────────────────────────────────────────────────────────────────────────┘
  
  monitor:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Setup monitoring
        run: |
          if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
            echo "MONITOR_URL=${{ vars.PRODUCTION_URL }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=production" >> $GITHUB_ENV
          else
            echo "MONITOR_URL=${{ vars.STAGING_URL }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          fi
      
      - name: Monitor deployment for 10 minutes
        run: |
          echo "Monitoring ${{ env.ENVIRONMENT }} deployment..."
          for i in {1..20}; do
            echo "Health check $i/20..."
            if curl -f ${{ env.MONITOR_URL }}/api/health; then
              echo "✓ Health check passed"
            else
              echo "✗ Health check failed"
              exit 1
            fi
            sleep 30
          done
          echo "Monitoring completed successfully"
      
      - name: Update deployment status
        if: always()
        uses: deployments/actions@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: ${{ env.ENVIRONMENT }}
          state: ${{ job.status == 'success' && 'success' || 'failure' }}
          deployment-id: ${{ github.run_id }}

# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
# WORKFLOW CONFIGURATION
# ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  deployments: write